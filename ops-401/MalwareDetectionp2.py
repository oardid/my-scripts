#!/bin/usr/python3

# Script Name:                  ops401-challenge32
# Author:                       Omar Ardid
# Date of latest revision:      06/10/2024
# Purpose:                      Adding a feature to generating a hash value derived from a target file
# Resources:                    https://docs.python.org/3/library/hashlib.html
#                               https://www.programiz.com/python-programming/examples/hash-file

# Import necessary modules for operating system interaction, time handling, and user input
import os  # Provides functions for interacting with the operating system
import sys  # Provides information about the Python interpreter and its environment
import time  # Provides functions for time-related tasks such as pausing execution
import hashlib  # Provides functions for generating hashes

# Function to display animated text
def animated_text(text):
    # Define animation frames
    animation_frames = ["|", "/", "-", "\\"]
    # Loop to repeat animation 5 times
    for _ in range(5):
        # Loop through animation frames
        for frame in animation_frames:
            # Print animated text on the same line using carriage return
            print(f"\r{text} {frame}", end="", flush=True)
            # Pause briefly to create animation effect
            time.sleep(0.1)
    # Move to the next line after completing the animation
    print()

# Function to search for a file in a directory
def search_file(file_name, search_directory):
    # Initialize counters
    hits = 0
    files_searched = 0

    try:
        # Traverse directory and search for files
        for root, dirs, files in os.walk(search_directory):
            for file in files:
                files_searched += 1
                # Check if file name contains the specified search term
                if file_name.lower() in file.lower():
                    hits += 1
                    file_path = os.path.join(root, file)
                    # Get the file size
                    file_size = os.path.getsize(file_path)
                    # Get the current timestamp
                    timestamp = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
                    # Generate the MD5 hash of the file
                    md5_hash = generate_md5(file_path)
                    # Print the file details
                    print(f"Timestamp: {timestamp}")
                    print(f"File: {file}")
                    print(f"Path: {file_path}")
                    print(f"Size: {file_size} bytes")
                    print(f"MD5: {md5_hash}")
                    print("-" * 40)
    # Handle exceptions
    except Exception as e:
        print(f"(‡∏á ‚Ä¢ÃÄ_‚Ä¢ÃÅ)‡∏á An error occurred: {str(e)}")
    
    # Print search summary
    print(f"\n(„Å£Ôºæ‚ñøÔºæ)üí® Search completed. {files_searched} files searched. {hits} hits found.")
    # Wait for user input before exiting
    input("\n  ï‚Ä¢ÃÅ·¥•‚Ä¢ÃÄ î„Å£ Press Enter to exit.")

# Function to generate the MD5 hash of a file
def generate_md5(file_path):
    hash_md5 = hashlib.md5()
    try:
        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
    except Exception as e:
        print(f"(‡∏á ‚Ä¢ÃÄ_‚Ä¢ÃÅ)‡∏á Error reading file {file_path}: {str(e)}")
        return None
    return hash_md5.hexdigest()

# Main function
def main():
    # Determine the current operating system
    operating_system = sys.platform
    # Check if the operating system is supported
    if operating_system.startswith('linux') or operating_system.startswith('win32'):
        # Display animated text indicating the current operating system
        animated_text(f"Running on {operating_system.capitalize()}...   ï‚Ä¢ÃÅ·¥•‚Ä¢ÃÄ î„Å£")
        # Prompt user for file name and search directory
        file_name = input("Enter the file name to search for: ")
        search_directory = input("Enter the directory to search in: ")
        # Check if the specified directory exists
        if not os.path.exists(search_directory):
            print("(‡∏á ‚Ä¢ÃÄ_‚Ä¢ÃÅ)‡∏á The specified directory does not exist.")
            return
    else:
        # Print message for unsupported operating systems
        print("(‡∏á ‚Ä¢ÃÄ_‚Ä¢ÃÅ)‡∏á Unsupported operating system.")
        return

    # Call the search_file function
    search_file(file_name, search_directory)

if __name__ == "__main__":
    main()